const process = require('process'); // 현재 동작 중이 node process에 대한 정보를 담고 있는 객체

console.log(process.version); // node version
console.log(process.execPath); // node 실행 경로
console.log(process.pid); // process id
console.log(process.ppid); // parent process id
console.log(process.platform); // 현재 실행 중인 node.js 프로그램이 실행되고 있는 운영 체제 ex) aix darwin win32 linux ...
console.log(process.arch); // architecture
console.log(process.cwd()); // current working directory
console.log(process.uptime()); // process(node)가 시작된 후 흐른 시간
console.log(process.cpuUsage()); // cpu 사용량

// Node.js의 process.env에 저장된 환경 변수는 운영 체제의 환경 변수에 저장된 값들을 참조하는 것 → 실제로는 시스템 레벨 또는 프로세스 레벨에서 설정된 환경 변수를 노출시키는 인터페이스
console.log(process.env);

setTimeout(() => {
  console.log('setTimeout');
}, 0);

// nextTick
// → 현재 실행 중이 코드가 완료된 등록된 콜백함수를 task-queue 에 넣어달라!  => 이런 관점에서 setTimeout과 같음!
// → 차이점 : task-queue에 이미 들어있는 콜백함수가 있어도 nextTick에서의 콜백함수가 우선순위를 가장 높여서 실행됨
process.nextTick(() => {
  console.log('nextTick');
});

for (let i = 0; i < 100; i++) {
  console.log('for loop');
}
